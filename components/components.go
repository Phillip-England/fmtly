// Code generated by gtml; DO NOT EDIT.
// +build ignore
// v0.1.0 | you may see errors with types, you'll need to manage your own imports
// type support coming soon!

package components

import "strings"

func gtmlFor[T any](slice []T, callback func(i int, item T) string) string {
var builder strings.Builder
for i, item := range slice {
	builder.WriteString(callback(i, item))
}
return builder.String()
}

func gtmlIf(condition bool, fn func() string) string {
if condition {
	return fn()
}
return ""
}

func gtmlElse(condition bool, fn func() string) string {
if !condition {
	return fn()
}
return ""
}

func gtmlSlot(contentFunc func() string) string {
return contentFunc()
}

func GuestLayout(content string) string {
	var builder strings.Builder
	builder.WriteString(`<div _component="GuestLayout" _id="0"><navbar>my navbar</navbar>`)
	builder.WriteString(content)
	builder.WriteString(`<footer></footer><div><guestlayout _component="HomePage" _placeholder="GuestLayout" _id="0"><div _slot="content" _id="1">I will appear in the content section!</div></guestlayout></div></div>`)
	return builder.String()
}

func HomePage() string {
	var builder strings.Builder
	guestlayoutPlaceholder0 := func() string {
		contentSlot1 := gtmlSlot(func() string {
			var contentBuilder strings.Builder
			contentBuilder.WriteString(`<div _slot="content" _id="1">I will appear in the content section!</div>`)
			return contentBuilder.String()
		})
		return GuestLayout(contentSlot1)
	}
	builder.WriteString(guestlayoutPlaceholder0())
	return builder.String()
}

