// Code generated by gtml; DO NOT EDIT.
// +build ignore
// v0.1.0 | you may see errors with types, you'll need to manage your own imports
// type support coming soon!

package components

import "strings"

func gtmlFor[T any](slice []T, callback func(i int, item T) string) string {
var builder strings.Builder
for i, item := range slice {
	builder.WriteString(callback(i, item))
}
return builder.String()
}

func gtmlIf(condition bool, fn func() string) string {
if condition {
	return fn()
}
return ""
}

func gtmlElse(condition bool, fn func() string) string {
if !condition {
	return fn()
}
return ""
}

func gtmlSlot(contentFunc func() string) string {
return contentFunc()
}

func SlotBasic(top string, bottom string) string {
	var builder strings.Builder
	builder.WriteString(`<div _component="SlotBasic" _id="0">`)
	builder.WriteString(top)
	builder.WriteString(`<h1>ðŸ¥ª</h1>`)
	builder.WriteString(bottom)
	builder.WriteString(`</div>`)
	return builder.String()
}

func Sandwich() string {
	var builder strings.Builder
	slotbasicPlaceholder0 := func() string {
		bottomSlot1 := gtmlSlot(func() string {
			var bottomBuilder strings.Builder
			bottomBuilder.WriteString(`<p _slot="bottom" _id="1">I am on bottom</p>`)
			return bottomBuilder.String()
		})
		topSlot2 := gtmlSlot(func() string {
			var topBuilder strings.Builder
			topBuilder.WriteString(`<p _slot="top" _id="2">I am on top</p>`)
			return topBuilder.String()
		})
		return SlotBasic(topSlot2, bottomSlot1)
	}
	builder.WriteString(slotbasicPlaceholder0())
	return builder.String()
}

