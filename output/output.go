// Code generated by gtml; DO NOT EDIT.
// +build ignore
// v0.1.0 | you may see errors with types, you'll need to manage your own imports
// type support coming soon!

package output

import "strings"

func gtmlFor[T any](slice []T, callback func(i int, item T) string) string {
var builder strings.Builder
for i, item := range slice {
	builder.WriteString(callback(i, item))
}
return builder.String()
}

func gtmlIf(condition bool, fn func() string) string {
if condition {
	return fn()
}
return ""
}

func gtmlElse(condition bool, fn func() string) string {
if !condition {
	return fn()
}
return ""
}

func gtmlSlot(contentFunc func() string) string {
return contentFunc()
}

func GuestMesh(someTitle string, guests []Guest, isAdmin bool, colors []string, loggedIn bool) string {
	var builder strings.Builder
	guestFor1 := gtmlFor(guests, func(i int, guest Guest) string {
		var guestBuilder strings.Builder
		itemFor2 := gtmlFor(guest.Items, func(i int, item Item) string {
			var itemBuilder strings.Builder
			colorFor3 := gtmlFor(item.Colors, func(i int, color Color) string {
				var colorBuilder strings.Builder
				isAdminIf4 := gtmlIf(isAdmin, func() string {
					var isAdminBuilder strings.Builder
					isAdminBuilder.WriteString(`<div _if="isAdmin" _id="4"><p>Hello Admin!</p></div>`)
					if isAdmin {
						return isAdminBuilder.String()
					}
					return ""
				})
				colorBuilder.WriteString(`<div _for="color of item.Colors []Color" _id="3"><p>`)
				colorBuilder.WriteString(color.Hue)
				colorBuilder.WriteString(`</p><p>`)
				colorBuilder.WriteString(color.Name)
				colorBuilder.WriteString(`</p>`)
				colorBuilder.WriteString(isAdminIf4)
				colorBuilder.WriteString(`</div>`)
				return colorBuilder.String()
			})
			itemBuilder.WriteString(`<div _for="item of guest.Items []Item" _id="2"><p>`)
			itemBuilder.WriteString(item.Name)
			itemBuilder.WriteString(`</p><p>`)
			itemBuilder.WriteString(item.Price)
			itemBuilder.WriteString(`</p>`)
			itemBuilder.WriteString(colorFor3)
			itemBuilder.WriteString(`</div>`)
			return itemBuilder.String()
		})
		guestBuilder.WriteString(`<div _for="guest of guests []Guest" _id="1"><h1>`)
		guestBuilder.WriteString(guest.Name)
		guestBuilder.WriteString(`</h1><p>The guest has brought the following items:</p>`)
		guestBuilder.WriteString(itemFor2)
		guestBuilder.WriteString(`</div>`)
		return guestBuilder.String()
	})
	colorFor5 := gtmlFor(colors, func(i int, color string) string {
		var colorBuilder strings.Builder
		colorBuilder.WriteString(`<div _for="color of colors []string" _id="5"><p>`)
		colorBuilder.WriteString(color)
		colorBuilder.WriteString(`</p><p>`)
		colorBuilder.WriteString(color)
		colorBuilder.WriteString(`</p></div>`)
		return colorBuilder.String()
	})
	loggedInIf6 := gtmlIf(loggedIn, func() string {
		var loggedInBuilder strings.Builder
		loggedInBuilder.WriteString(`<div _if="loggedIn" _id="6"><p>Logged in!</p></div>`)
		if loggedIn {
			return loggedInBuilder.String()
		}
		return ""
	})
	builder.WriteString(`<div _component="GuestMesh" _id="0"><h1>`)
	builder.WriteString(someTitle)
	builder.WriteString(`</h1>`)
	builder.WriteString(guestFor1)
	builder.WriteString(colorFor5)
	builder.WriteString(loggedInIf6)
	builder.WriteString(`</div>`)
	return builder.String()
}

